import java.nio.file.Path

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

String xamarinTargetFrameworkVersion = 'v12.0' // Corresponds to compileSdkVersion

Path frameworksPath = new File('/Library/Frameworks').toPath()
Path monoFrameworkPath = frameworksPath.resolve('Mono.framework/Versions/Current')
Path msbuildPath = monoFrameworkPath.resolve('Commands/msbuild')
Path xamarinAndroidPath = frameworksPath.resolve('Xamarin.Android.framework/Versions/Current')
Path projectPath = new File('../../XamarinDependency').toPath()
Path appPath = projectPath.resolve('XamarinDependency.Application')
Path objPath = appPath.resolve('obj')

String envPath = [System.getenv('PATH'), monoFrameworkPath.resolve('Commands').toString()].join(':')
Path monoAndroidPath = xamarinAndroidPath.resolve("lib/xbuild-frameworks/MonoAndroid/$xamarinTargetFrameworkVersion/mono.android.jar")
Path javaRuntimePath = xamarinAndroidPath.resolve("lib/xbuild/Xamarin/Android/java_runtime.jar")


android {
    compileSdkVersion project.compileSdkVersion
    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        debug {
            java {
                srcDirs objPath.resolve('Debug/android/src')
                exclude 'android/**'
            }
            resources.srcDirs objPath.resolve('Debug/android/bin/unpacked')
            jniLibs.srcDirs = [objPath.resolve('Debug/android/bin/unpacked/lib')]
            jni.srcDirs = []
        }
        release {
            java {
                srcDirs objPath.resolve('Release/android/src')
                exclude 'android/**'
            }
            resources.srcDirs objPath.resolve('Release/android/bin/unpacked')
            jniLibs.srcDirs = [objPath.resolve('Release/android/bin/unpacked/lib')]
            jni.srcDirs = []
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    debugImplementation files(monoAndroidPath)
    releaseImplementation files(monoAndroidPath)
    androidTestImplementation files(monoAndroidPath)

    debugImplementation files(javaRuntimePath)
    releaseImplementation files(javaRuntimePath)
    androidTestImplementation files(javaRuntimePath)

    api project(':xamarininterface')

    implementation 'androidx.appcompat:appcompat:1.1.0'

    // Dependencies required to resolve build errors
    implementation "androidx.transition:transition:1.3.1"
    implementation "androidx.asynclayoutinflater:asynclayoutinflater:1.0.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.slidingpanelayout:slidingpanelayout:1.1.0"
    implementation 'com.google.android.material:material:1.1.0'
    // End

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task copyDebugBindingsJar(type: Jar) {
    from '../xamarininterface/build/tmp/kotlin-classes/debug', '../xamarininterface/build/intermediates/classes/debug'
    archiveName "classes.jar"
    destinationDir file(projectPath.resolve('XamarinDependency.LibraryBindings/Jars'))
    dependsOn tasks.getByPath(":xamarininterface:compileDebugSources")
    exclude 'android/**'
}

task copyReleaseBindingsJar(type: Jar) {
    from '../xamarininterface/build/tmp/kotlin-classes/release', '../xamarininterface/build/intermediates/classes/release'
    archiveName "classes.jar"
    destinationDir file(projectPath.resolve('XamarinDependency.LibraryBindings/Jars'))
    dependsOn tasks.getByPath(":xamarininterface:compileReleaseSources")
    exclude 'android/**'
}

task cleanBindingsJar(type: Delete) {
    delete projectPath.resolve('XamarinDependency.LibraryBindings/Jars/classes.jar')
}

task cleanXamarin(type: Exec) {
    workingDir appPath
    executable msbuildPath
    args '/target:clean'
    inputs.dir(projectPath)
    outputs.dirs(objPath.resolve('Debug'))
    dependsOn cleanBindingsJar
}

task compileDebugXamarin(type: Exec) {
    workingDir appPath
    executable msbuildPath
    args '/target:BuildApk', '/property:Configuration=Debug', '/property:Platform=AnyCPU', "/property:TargetFrameworkVersion=$xamarinTargetFrameworkVersion"
    inputs.dir(projectPath)
    outputs.dirs(objPath.resolve('Debug'))
    environment('PATH', envPath)
    // Workaround for /Library/Frameworks/Xamarin.Android.framework/Versions/Current/bin/generator: line 6: exec: mono: not found
    dependsOn copyDebugBindingsJar
}

task compileReleaseXamarin(type: Exec) {
    workingDir appPath
    executable msbuildPath
    args '/target:BuildApk', '/property:Configuration=Release', '/property:Platform=AnyCPU', "/property:TargetFrameworkVersion=$xamarinTargetFrameworkVersion"
    inputs.dir(projectPath)
    outputs.dirs(objPath.resolve('Release'))
    environment('PATH', envPath)
    dependsOn copyReleaseBindingsJar
}

task unpackDebugXamarin(type: UnpackXamarinApk) {
    apk file(objPath.resolve('Debug/android/bin/com.roydammarell.XamarinDependency.apk'))
    dependsOn compileDebugXamarin
}

task unpackReleaseXamarin(type: UnpackXamarinApk) {
    apk file(objPath.resolve('Release/android/bin/com.roydammarell.XamarinDependency.apk'))
    dependsOn compileReleaseXamarin
}

class UnpackXamarinApk extends Copy {
    def apk(File file) {
        File directory = file.parentFile
        Path outputDir = directory.toPath().resolve('unpacked')

        from project.zipTree(file).matching {
            include(['assemblies/**', 'lib/**', 'typemap.**', 'environment', 'NOTICE'])
        }
        into outputDir
    }
}

afterEvaluate {
    tasks.clean.dependsOn cleanXamarin

    tasks.compileDebugKotlin.dependsOn unpackDebugXamarin
    tasks.compileReleaseKotlin.dependsOn unpackReleaseXamarin

    tasks.compileDebugJavaWithJavac.dependsOn unpackDebugXamarin
    tasks.compileReleaseJavaWithJavac.dependsOn unpackReleaseXamarin

    tasks.processDebugJavaRes.dependsOn unpackDebugXamarin
    tasks.processReleaseJavaRes.dependsOn unpackReleaseXamarin

    tasks.generateDebugSources.dependsOn compileDebugXamarin
    tasks.generateReleaseSources.dependsOn compileReleaseXamarin
}

repositories {
    mavenCentral()
}
